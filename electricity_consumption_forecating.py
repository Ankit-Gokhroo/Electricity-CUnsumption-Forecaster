# -*- coding: utf-8 -*-
"""finalenergy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hdEIEhCjBv90Imt6-xsLf2Xzltwt5tnm

Mounting the drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importing Modules and Libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import pyplot
import seaborn as sns
from pandas.plotting import autocorrelation_plot
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from math import sqrt
from statsmodels.tsa.arima_model import ARIMA        #importing ARIMA

import os
os.getcwd()
os.chdir('/content/drive/My Drive/Rnn/energyforecast')

"""# Loading dataset from csv file"""

data=pd.read_csv('Power-Networks-LCL.csv')

"""# **Data Analysis** and Visualisation"""

data.head()

data.info()

data.describe()

LCLid_Count=data['LCLid'].value_counts()
LCLid_Count

"""According to problem statement,we need to forecast energy usage of top 3 households based on their samples.So here we find 'MAC000018','MAC000020' and 'MAC000021' are top 3 households."""

data_18=data[data['LCLid']=='MAC000018']
data_20=data[data['LCLid']=='MAC000020']
data_21=data[data['LCLid']=='MAC000021']

data_combined=pd.DataFrame()

data_combined=data_combined.append(data_18)
data_combined=data_combined.append(data_20)
data_combined=data_combined.append(data_21)

data_combined['LCLid'].value_counts()

fig = plt.figure(figsize=(10,5))

sns.countplot(x='LCLid',data=data_combined)
plt.show()

data_combined['Acorn'].value_counts()

fig = plt.figure(figsize=(10,5))

sns.countplot(x='Acorn',data=data_combined)
plt.show()

data_combined['Acorn_grouped'].value_counts()

fig = plt.figure(figsize=(10,5))

sns.countplot(x='Acorn_grouped',data=data_combined)
plt.show()

"""# Data PreProcessing"""

data_combined.isnull().sum()

data.isnull().sum()

"""There is no null values in data."""

data_18_processed=data_18[['KWh','DateTime']]
data_20_processed=data_20[['KWh','DateTime']]
data_21_processed=data_21[['KWh','DateTime']]

data_18_processed.head()

data_20_processed.head()

data_21_processed.head()

data_21_processed['DateTime'] = pd.to_datetime(data_21_processed['DateTime']) #to_datetime() method helps to convert string Date time into Python Date time object.
data_20_processed['DateTime'] = pd.to_datetime(data_20_processed['DateTime'])
data_18_processed['DateTime'] = pd.to_datetime(data_18_processed['DateTime'])

"""seperate DateTime column into date and time"""

data_18_processed['Time'],data_18_processed['Date']= data_18_processed['DateTime'].apply(lambda x:x.time()), data_18_processed['DateTime'].apply(lambda x:x.date())
data_20_processed['Time'],data_20_processed['Date']= data_20_processed['DateTime'].apply(lambda x:x.time()), data_20_processed['DateTime'].apply(lambda x:x.date())
data_21_processed['Time'],data_21_processed['Date']= data_21_processed['DateTime'].apply(lambda x:x.time()), data_21_processed['DateTime'].apply(lambda x:x.date())

"""making Date column as index"""

data_18_processed.set_index('Date',inplace=True)
data_20_processed.set_index('Date',inplace=True)
data_21_processed.set_index('Date',inplace=True)

"""Took only KWh column in data"""

data_18_processed=data_18_processed['KWh']
data_20_processed=data_20_processed['KWh']
data_21_processed=data_21_processed['KWh']

data_18_processed.head()

"""Visuaisation of data spreaded of household MAC000018."""

fig = plt.figure(figsize=(20,10))
data_18_processed.plot()
pyplot.show()

"""Visuaisation of data spreaded of household MAC000020."""

fig = plt.figure(figsize=(20,10))
data_20_processed.plot()
pyplot.show()

"""Visuaisation of data spreaded of household MAC000021."""

fig = plt.figure(figsize=(20,10))
data_21_processed.plot()
pyplot.show()

"""Autocorrelation for a large number of lags in the time series."""

autocorrelation_plot(data_18_processed)
pyplot.show()

autocorrelation_plot(data_20_processed)
pyplot.show()

autocorrelation_plot(data_21_processed)
pyplot.show()

"""# Fitting of Model by Arima"""

# fit model 1 for household MAC000018.
model_18 = ARIMA(data_18_processed, order=(5,1,0))
model_fit_18 = model_18.fit(disp=0)
print(model_fit_18.summary())

# fit model 2 for household MAC000020.
model_20 = ARIMA(data_20_processed, order=(5,1,0))
model_fit_20 = model_20.fit(disp=0)
print(model_fit_20.summary())

# fit model 3 for household MAC000018==21.
model_21 = ARIMA(data_21_processed, order=(5,1,0))
model_fit_21 = model_21.fit(disp=0)
print(model_fit_21.summary())

X = data_18_processed.values
X.shape

Y = data_20_processed.values
Y.shape

Z = data_21_processed.values
Z.shape

size_18=39030
size_20=39030
size_21=39030

"""# splitting the data into train and test for each household seperately."""

train_18, test_18 = X[0:size_18], X[size_18:len(X)]
train_20, test_20 = Y[0:size_20], Y[size_20:len(Y)]
train_21, test_21 = Z[0:size_21], Z[size_21:len(Z)]

train_18.shape

test_18.shape

train_20.shape

test_20.shape

test_21.shape

train_21.shape

history_18 = [x for x in train_18]
history_20 = [x for x in train_20]
history_21 = [x for x in train_21]

predictions_18 = list()
predictions_20 = list()
predictions_21 = list()

"""# Making **Predictions**"""

#predictions for household MAC000018.
for t in range(len(test_18)):
	model_18 = ARIMA(history_18, order=(5,1,0))
	model_fit_18 = model_18.fit(disp=0)
	output_18 = model_fit_18.forecast()
	yhat_18 = output_18[0]
	predictions_18.append(yhat_18)
	obs_18 = test_18[t]
	history_18.append(obs_18)

#predictions for household MAC000020.
for t in range(len(test_20)):
	model_20 = ARIMA(history_20, order=(5,1,0))
	model_fit_20 = model_20.fit(disp=0)
	output_20 = model_fit_20.forecast()
	yhat_20 = output_20[0]
	predictions_20.append(yhat_20)
	obs_20 = test_20[t]
	history_20.append(obs_20)

#predictions for household MAC000021.
for t in range(len(test_21)):
	model_21 = ARIMA(history_21, order=(5,1,0))
	model_fit_21 = model_21.fit(disp=0)
	output_21 = model_fit_21.forecast()
	yhat_21 = output_21[0]
	predictions_21.append(yhat_21)
	obs_21 = test_21[t]
	history_21.append(obs_21)

"""# Visualise and Compare actual values and predicted values."""

# plot1 for household MAC000018.
pyplot.plot(test_18,label='Actual')
pyplot.plot(predictions_18, color='red',label='predicted')
plt.legend()
plt.title("Energy usage in kwh for household 'MAC000018'", fontsize=14, fontstyle='italic', fontweight='bold')
pyplot.show()

# plot2 for household MAC000020.
pyplot.plot(test_20,label='Actual')
pyplot.plot(predictions_20, color='red',label='predicted')
plt.legend()
plt.title("Energy usage in kwh for household 'MAC000020'", fontsize=14, fontstyle='italic', fontweight='bold')
pyplot.show()

# plot3 for household MAC000021.
pyplot.plot(test_21,label='actual')
pyplot.plot(predictions_21, color='red',label='predicted')
plt.legend()
plt.title("Energy usage in kwh for household 'MAC000021'", fontsize=14, fontstyle='italic', fontweight='bold')
pyplot.show()

"""# Checking of models performance by different ways"""

def report(a,b):
  #give a,b as arguements  in form of  i.e (test_18,predictions_18).
  mse = mean_squared_error(a, b)
  rmse = sqrt(mse)
  mae = mean_absolute_error(a,b)
  a=print("mean square error:",mse)
  b=print("square root mean square error:",rmse)
  c=print("mean absolute error:",mae)
  
  return a,b,c

report(test_18,predictions_18)    #calling of function for household MAC000018.

report(test_20,predictions_20)      #calling of function for household MAC000020.

report(test_21,predictions_21)         #calling of function for household MAC000021.

predictions1_18=[]
for i in range(len(predictions_18)):
  predictions1_18.append(predictions_18[i][0])
predictions1_20=[]
for i in range(len(predictions_20)):
  predictions1_20.append(predictions_20[i][0])
predictions1_21=[]
for i in range(len(predictions_21)):
  predictions1_21.append(predictions_21[i][0])

"""# Making DataFrame of actual and predicted values for camparision"""

df_18=pd.DataFrame()
df_18=pd.DataFrame({'Actual_18':test_18, 'Predicted_18':predictions1_18})  

df_20=pd.DataFrame()
df_20=pd.DataFrame({'Actual_20':test_20, 'Predicted_20':predictions1_20})  

df_21=pd.DataFrame()
df_21=pd.DataFrame({'Actual_21':test_21, 'Predicted_21':predictions1_21})

df_combined=pd.concat([df_18, df_20], axis=1)

df_combined=pd.concat([df_combined, df_21], axis=1)
df_combined.head()

